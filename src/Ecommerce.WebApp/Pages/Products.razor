@page "/products"
@attribute [Authorize]
@using Blazored.Toast.Services
@using Ecommerce.WebApp.Models
@using Microsoft.AspNetCore.Authorization
@inject IProductService ProductService
@inject IToastService ToastService

<h3 class="mb-4">Gerenciamento de Produtos</h3>

<div class="row justify-content-center">
    <div class="col-12 col-lg-10 col-xl-8">

        <h4 class="mb-3">Adicionar Novo Produto</h4>
        <div class="card mb-5">
            <div class="card-body">
                <EditForm Model="newProduct" OnValidSubmit="HandleCreateProduct">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <input class="form-control" @bind="newProduct.Name" placeholder="Nome do Produto" />
                    </div>

                    <div class="mb-3">
                        <input class="form-control" @bind="newProduct.Description" placeholder="Descrição do Produto" />
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            @* Usando input normal para permitir placeholder *@
                            <input type="text" inputmode="decimal" class="form-control" @bind="priceInput" placeholder="Preço (R$)" />
                        </div>
                        <div class="col-md-6">
                            @* Usando input normal para permitir placeholder *@
                            <input type="text" inputmode="numeric" class="form-control" @bind="stockInput" placeholder="Quantidade em Estoque" />
                        </div>
                    </div>

                    <div class="d-grid gap-2">
                        <button type="submit" class="btn btn-success">Adicionar Produto</button>
                    </div>
                </EditForm>
            </div>
        </div>

        <h4 class="mt-5 text-center">Produtos em Estoque</h4>
        <div class="card">
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-striped table-hover mb-0">
                        <thead class="thead-dark">
                            <tr>
                                <th scope="col" class="text-center">#</th>
                                <th scope="col">Nome</th>
                                <th scope="col" class="text-end">Preço</th>
                                <th scope="col" class="text-center">Estoque</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (products.Any())
                            {
                                @foreach (var product in products.OrderBy(p => p.Id))
                                {
                                    <tr>
                                        <th scope="row" class="text-center">@product.Id</th>
                                        <td>@product.Name</td>
                                        <td class="text-end">@product.Price?.ToString("C")</td>
                                        <td class="text-center">@product.QuantityInStock</td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="4" class="text-center">Nenhum produto cadastrado.</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

    </div>
</div>


@code {
    private List<Product> products = new();
    private Product newProduct = new();

    // Variáveis de texto para os inputs numéricos
    private string? priceInput;
    private string? stockInput;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        var productList = await ProductService.GetProducts();
        if (productList != null)
        {
            products = productList;
        }
    }

    private async Task HandleCreateProduct()
    {
        // Garante que valores nulos ou vazios se tornem 0 antes de enviar para a API
        newProduct.Price = decimal.TryParse(priceInput, out var price) ? price : 0;
        newProduct.QuantityInStock = int.TryParse(stockInput, out var stock) ? stock : 0;

        var result = await ProductService.CreateProduct(newProduct);
        if (result != null)
        {
            ToastService.ShowSuccess("Produto adicionado com sucesso!");
            newProduct = new(); // Limpa o modelo
            priceInput = null;  // Limpa os campos de texto do formulário
            stockInput = null;  // Limpa os campos de texto do formulário
            await LoadProducts(); // Recarrega a lista
            StateHasChanged();
        }
        else
        {
            ToastService.ShowError("Falha ao adicionar o produto.");
        }
    }
}